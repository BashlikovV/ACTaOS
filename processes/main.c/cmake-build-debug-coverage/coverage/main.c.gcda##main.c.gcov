        -:    0:Source:/home/bashlykovvv/Test/threadLB/processes/main.c/main.c
        -:    0:Graph:/home/bashlykovvv/Test/threadLB/processes/main.c/cmake-build-debug-coverage/CMakeFiles/main_c.dir/main.c.gcno
        -:    0:Data:/home/bashlykovvv/Test/threadLB/processes/main.c/cmake-build-debug-coverage/CMakeFiles/main_c.dir/main.c.gcda
        -:    0:Runs:17
        -:    1:#include <stdio.h>
        -:    2:#include <dirent.h>
        -:    3:#include <unistd.h>
        -:    4:#include <sys/stat.h>
        -:    5:#include <string.h>
        -:    6:#include <time.h>
        -:    7:#include <ctype.h>
        -:    8:#include <sys/wait.h>
        -:    9:#include <stdlib.h>
        -:   10:#include <sys/time.h>
        -:   11:
        -:   12:void search_file(char* dir_name, char file_name[256], int pid_count);
        -:   13:void mode_to_letters( int mode, char str[] );
        -:   14:int atoi( const char *c );
        -:   15:
function currentTime called 16 returned 100% blocks executed 100%
       16:   16:long long currentTime() {
        -:   17:    struct timeval time;
       16:   18:    gettimeofday(&time, NULL);
       16:   18-block  0
вызов    0 вернул 16
       16:   19:    return time.tv_usec / 1000;
        -:   20:}
        -:   21:
function main called 1 returned 100% blocks executed 67%
        1:   22:int main(int argc, char *argv[]) {
        -:   23:
        1:   24:    if (argc < 3) {
        1:   24-block  0
переход  0 выполнен 0 (fallthrough)
переход  1 выполнен 1
    #####:   25:        fprintf(stderr, "Error: Too few arguments~\n");
    %%%%%:   25-block  0
вызов   0 ни разу не исполнялся
    #####:   26:        return 1;
        -:   27:    }
        -:   28:
        1:   29:    char *tmp = argv[3];
        1:   30:    int pid_count = atoi(tmp);
        -:   31:
        1:   32:    search_file(argv[1], argv[2], pid_count);
        1:   32-block  0
вызов    0 вернул 1
        -:   33:
        1:   34:    return 0;
        -:   35:}
        -:   36:
function search_file called 17 returned 100% blocks executed 100%
       17:   37:void search_file(char *direc_name, char file_name[256], int pid_count) {
       17:   38:    pid_t pid[pid_count];
        -:   39:    int chaild_status;
        -:   40:
        -:   41:    struct dirent *d;
        -:   42:    struct stat st;
        -:   43:    char dir_name[255];
        -:   44:    char new_name[255];
       17:   45:    int count = 0;
        -:   46:
       17:   47:    DIR *d1 = opendir(direc_name);
       17:   47-block  0
вызов    0 вернул 17
       17:   48:    d = readdir(d1);
вызов    0 вернул 17
        -:   49:
       17:   50:    strcpy(dir_name, direc_name);
       17:   51:    strcat(dir_name, "/");
        -:   52:
       96:   53:    while (d != NULL) {
       96:   53-block  0
переход  0 выполнен 79
переход  1 выполнен 17 (fallthrough)
       79:   54:        if (d->d_type == DT_DIR) {
       79:   54-block  0
переход  0 выполнен 45 (fallthrough)
переход  1 выполнен 34
       45:   55:            if ((strcmp(d->d_name, ".") != 0) && (strcmp(d->d_name, "..") != 0)) {
       45:   55-block  0
переход  0 выполнен 28 (fallthrough)
переход  1 выполнен 17
       28:   55-block  1
переход  2 выполнен 11 (fallthrough)
переход  3 выполнен 17
       11:   56:                strcpy(new_name, direc_name);
       11:   57:                strcat(new_name, "/");
       11:   58:                strcat(new_name, d->d_name);
        -:   59:
       11:   60:                if ((pid[count] = fork()) == 0) {
       11:   60-block  0
вызов    0 вернул 27
переход  1 выполнен 16 (fallthrough)
переход  2 выполнен 11
       16:   61:                    printf("fork: %d; count = %d; time = %d; parent: %d\n", (int) getpid(), count, currentTime(), getppid());
       16:   61-block  0
вызов    0 вернул 16
вызов    1 вернул 16
вызов    2 вернул 16
вызов    3 вернул 16
       16:   62:                    search_file(new_name, file_name, pid_count);
вызов    0 вернул 16
       16:   63:                    exit(0);
вызов    0 вернул 0
        -:   64:                }
        -:   65:            }
        -:   66:        }
       79:   67:        count++;
       79:   68:        d = readdir(d1);
       79:   68-block  0
вызов    0 вернул 79
        -:   69:    }
        -:   70:
  2076463:   71:    for (int i = 0; i < pid_count; i++) {
       17:   71-block  0
  2076463:   71-block  1
переход  0 выполнен 2076446
переход  1 выполнен 17 (fallthrough)
  2076446:   72:        wait(&chaild_status);
  2076446:   72-block  0
вызов    0 вернул 2076446
        -:   73:    }
        -:   74:
       17:   75:    rewinddir(d1);
       17:   75-block  0
вызов    0 вернул 17
       17:   76:    d = readdir(d1);
вызов    0 вернул 17
        -:   77:
       96:   78:    while (d != NULL) {
       96:   78-block  0
переход  0 выполнен 79
переход  1 выполнен 17 (fallthrough)
       79:   79:        if (d->d_type == DT_REG) {
       79:   79-block  0
переход  0 выполнен 34 (fallthrough)
переход  1 выполнен 45
       34:   80:            strcpy(new_name, direc_name);
       34:   81:            strcat(new_name, d->d_name);
        -:   82:
       34:   83:            if (strcmp(d->d_name, file_name) == 0) {
       34:   83-block  0
переход  0 выполнен 1 (fallthrough)
переход  1 выполнен 33
        -:   84:                struct tm * timeinfo;
        -:   85:                char buff[20];
        -:   86:
        1:   87:                char *path = direc_name;
        -:   88:                char tmp[255];
        1:   89:                tmp[0] = '/';
        1:   90:                tmp[1] = '\000';
        1:   91:                strcat(tmp, file_name);
        1:   92:                strcat(path, tmp);
        1:   93:                printf("Path: %s\n", path);
        1:   93-block  0
вызов    0 вернул 1
        -:   94:
        1:   95:                printf("Name: %s\n", file_name);
вызов    0 вернул 1
        -:   96:
        1:   97:                stat(direc_name, &st);
вызов    0 вернул 1
        1:   98:                timeinfo = localtime((const time_t *) &st.st_ctime);
вызов    0 вернул 1
        1:   99:                strftime(buff, 20, "%b %d %H:%M", timeinfo);
        -:  100:
        -:  101:                char mode_str[11];
        1:  102:                mode_to_letters(st.st_mode, mode_str);
вызов    0 вернул 1
        -:  103:
        1:  104:                printf("Size: %ld byte\n", st.st_size);
вызов    0 вернул 1
        1:  105:                printf("Creating data: %s\n", buff);
вызов    0 вернул 1
        1:  106:                printf("Descriptor: %lu\n", st.st_ino);
вызов    0 вернул 1
        1:  107:                printf("Access rights: %s\n", mode_str);
вызов    0 вернул 1
        -:  108:            }
        -:  109:        }
       79:  110:        d = readdir(d1);
       79:  110-block  0
вызов    0 вернул 79
        -:  111:    }
       17:  112:}
        -:  113:
function mode_to_letters called 1 returned 100% blocks executed 68%
        1:  114:void mode_to_letters(int mode, char str[]) {
        1:  115:    strcpy( str, "----------" );           /* default=no perms */
        -:  116:
       1*:  117:    if ( S_ISDIR(mode) )  str[0] = 'd';    /* directory?       */
        1:  117-block  0
переход  0 выполнен 0 (fallthrough)
переход  1 выполнен 1
    %%%%%:  117-block  1
       1*:  118:    if ( S_ISCHR(mode) )  str[0] = 'c';    /* char devices     */
        1:  118-block  0
переход  0 выполнен 0 (fallthrough)
переход  1 выполнен 1
    %%%%%:  118-block  1
       1*:  119:    if ( S_ISBLK(mode) )  str[0] = 'b';    /* block device     */
        1:  119-block  0
переход  0 выполнен 0 (fallthrough)
переход  1 выполнен 1
    %%%%%:  119-block  1
        -:  120:
        1:  121:    if ( mode & S_IRUSR ) str[1] = 'r';    /* 3 bits for user  */
        1:  121-block  0
переход  0 выполнен 1 (fallthrough)
переход  1 выполнен 0
        1:  121-block  1
        1:  122:    if ( mode & S_IWUSR ) str[2] = 'w';
        1:  122-block  0
переход  0 выполнен 1 (fallthrough)
переход  1 выполнен 0
        1:  122-block  1
       1*:  123:    if ( mode & S_IXUSR ) str[3] = 'x';
        1:  123-block  0
переход  0 выполнен 0 (fallthrough)
переход  1 выполнен 1
    %%%%%:  123-block  1
        -:  124:
        1:  125:    if ( mode & S_IRGRP ) str[4] = 'r';    /* 3 bits for group */
        1:  125-block  0
переход  0 выполнен 1 (fallthrough)
переход  1 выполнен 0
        1:  125-block  1
       1*:  126:    if ( mode & S_IWGRP ) str[5] = 'w';
        1:  126-block  0
переход  0 выполнен 0 (fallthrough)
переход  1 выполнен 1
    %%%%%:  126-block  1
       1*:  127:    if ( mode & S_IXGRP ) str[6] = 'x';
        1:  127-block  0
переход  0 выполнен 0 (fallthrough)
переход  1 выполнен 1
    %%%%%:  127-block  1
        -:  128:
        1:  129:    if ( mode & S_IROTH ) str[7] = 'r';    /* 3 bits for other */
        1:  129-block  0
переход  0 выполнен 1 (fallthrough)
переход  1 выполнен 0
        1:  129-block  1
       1*:  130:    if ( mode & S_IWOTH ) str[8] = 'w';
        1:  130-block  0
переход  0 выполнен 0 (fallthrough)
переход  1 выполнен 1
    %%%%%:  130-block  1
       1*:  131:    if ( mode & S_IXOTH ) str[9] = 'x';
        1:  131-block  0
переход  0 выполнен 0 (fallthrough)
переход  1 выполнен 1
    %%%%%:  131-block  1
        1:  132:}
        -:  133:
        -:  134:int atoi( const char *c ) {
        1:  135:    int value = 0;
        1:  136:    int sign = 1;
        1:  137:    if( *c == '+' || *c == '-' ) {
        1:  137-block  0
переход  0 выполнен 1 (fallthrough)
переход  1 выполнен 0
        1:  137-block  1
переход  2 выполнен 0 (fallthrough)
переход  3 выполнен 1
    #####:  138:        if( *c == '-' ) sign = -1;
    %%%%%:  138-block  0
переход  0 ни разу не выполнялся
переход  1 ни разу не выполнялся
    %%%%%:  138-block  1
    #####:  139:        c++;
    %%%%%:  139-block  0
        -:  140:    }
        2:  141:    while ( isdigit( *c ) ) {
        1:  141-block  0
        2:  141-block  1
переход  0 выполнен 1
переход  1 выполнен 1 (fallthrough)
        1:  142:        value *= 10;
        1:  143:        value += (int) (*c-'0');
        1:  144:        c++;
        1:  144-block  0
        -:  145:    }
        1:  146:    return value * sign;
        1:  146-block  0
        -:  147:}
